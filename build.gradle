plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.57'
    id 'antlr'
}


version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = "${mod_name}-${minecraft_version}"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// this must come before runs for the sourcesets to be available when calling modSource project.sourceSets.gametest
sourceSets {
    main {
        resources {
            srcDirs += "src/generated/resources"
            srcDirs += "src/main/resources"
            exclude ".cache"

        }

        java {
            exclude "ca/teamdman/sfm/client/jei/**"
            exclude "ca/teamdman/sfm/common/resourcetype/exclude/**"
            exclude "ca/teamdman/sfm/common/compat/SFMMekanismCompat.java"
        }
    }
    // https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests
    test {
        compileClasspath += main.output
//        runtimeClasspath += sourceSets.main.output
    }
    datagen {
        compileClasspath += main.output
//        runtimeClasspath += sourceSets.main.output
    }
    generated
    gametest {
        java {
            srcDir "src/gametest/java"
            exclude "ca/teamdman/sfm/compat/**"
        }
        compileClasspath += main.output
//        compileClasspath += sourceSets.main.output
//        runtimeClasspath += sourceSets.main.output
        resources {
            srcDirs += "src/gametest/resources"
        }
    }
}


// Ensure sources are available for other modules
configurations {
    extendConfigurations(implementation, gametestImplementation, testImplementation, datagenImplementation)
    extendConfigurations(compileOnly, gametestCompileOnly, testCompileOnly, datagenCompileOnly)
    extendConfigurations(runtimeOnly, gametestRuntimeOnly, testRuntimeOnly, datagenRuntimeOnly)
}
static void extendConfigurations(Configuration base, Configuration... configurations) {
    for (def configuration : configurations) {
        configuration.extendsFrom(base)
    }
}



// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        modSource project.sourceSets.gametest
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        modSource project.sourceSets.gametest
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        modSource project.sourceSets.datagen
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}



dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html


    antlr 'org.antlr:antlr4:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }

    // prevent duplicate resource issues from additional sourceSets
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}


test {
    useJUnitPlatform()
}

generateGrammarSource {
    arguments = ["-visitor", "-package", "ca.teamdman.sfml"]
    outputDirectory = file("${project.buildDir}/generated-src/antlr/main/ca/teamdman/sfml")
}
compileJava.dependsOn generateGrammarSource

//
//// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
//java.toolchain.languageVersion = JavaLanguageVersion.of(17)
//
//println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
//minecraft {
//    // The mappings can be changed at any time and must be in the following format.
//    // Channel:   Version:
//    // official   MCVersion             Official field/method names from Mojang mapping files
//    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
//    //
//    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
//    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
//    //
//    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
//    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
//    //
//    // Use non-default mappings at your own risk. They may not always work.
//    // Simply re-run your setup task after changing the mappings to update your workspace.
//    mappings channel: mapping_channel, version: mapping_version
//
//    // When true, this property will have all Eclipse run configurations run the "prepareX" task for the given run configuration before launching the game.
//    // In most cases, it is not necessary to enable.
//    // enableEclipsePrepareRuns = true
//
//    // When true, this property will have all IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
//    // In most cases, it is not necessary to enable.
//    // enableIdeaPrepareRuns = true
//
//    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
//    // It is REQUIRED to be set to true for this template to function.
//    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
//    copyIdeResources = true
//
//    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
//    // The folder name can be set on a run configuration using the "folderName" property.
//    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
//    // generateRunFolders = true
//
//    // This property enables access transformers for use in development.
//    // They will be applied to the Minecraft artifact.
//    // The access transformer file can be anywhere in the project.
//    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
//    // This default location is a best practice to automatically put the file in the right place in the final jar.
//    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
//
//    // Default run configurations.
//    // These can be tweaked, removed, or duplicated as needed.
//    runs {
//        client {
//            workingDirectory project.file('run')
//
//            // Recommended logging data for a userdev environment
//            // The markers can be added/remove as needed separated by commas.
//            // "SCAN": For mods scan.
//            // "REGISTRIES": For firing of registry events.
//            // "REGISTRYDUMP": For getting the contents of all registries.
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            // Recommended logging level for the console
//            // You can set various levels here.
//            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
//            property 'forge.logging.console.level', 'debug'
//
//            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
//            property 'forge.enabledGameTestNamespaces', mod_id
//
//            // Ensure mixin dependencies play nice
//            property 'mixin.env.remapRefMap', 'true'
//            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//
//            // https://github.com/ChiefArug/ThermalSysteams/blob/main/build.gradle#L27
//            // https://discord.com/channels/313125603924639766/983834532904042537/1089449308048343090
//            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'
//
//            mods {
//                "${mod_id}" {
//                    source sourceSets.main
//                    source sourceSets.gametest
//                }
//            }
//        }
//
//        client_teamy {
//            //noinspection GroovyAssignabilityCheck
//            parent runs.client
//            args '--username', 'TeamDman', '--uuid', '83f1df8b-0ba3-4de0-8a26-e51a1fd74318'
//        }
//
//        server {
//            workingDirectory project.file('runServer')
//
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            property 'forge.logging.console.level', 'debug'
//
//            property 'forge.enabledGameTestNamespaces', mod_id
//
//            property 'mixin.env.remapRefMap', 'true'
//            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//
//            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'
//
//            mods {
//                "${mod_id}" {
//                    source sourceSets.main
//                    source sourceSets.gametest
//                }
//            }
//        }
//
//        // This run config launches GameTestServer and runs all registered gametests, then exits.
//        // By default, the server will crash when no gametests are provided.
//        // The gametest system is also enabled by default for other run configs under the /test command.
//        gameTestServer {
//            workingDirectory project.file('runGameTest')
//
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            property 'forge.logging.console.level', 'debug'
//
//            property 'forge.enabledGameTestNamespaces', mod_id
//
//            property 'mixin.env.remapRefMap', 'true'
//            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//
//            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'
//
//            mods {
//                "${mod_id}" {
//                    source sourceSets.main
//                    source sourceSets.gametest
//                }
//            }
//        }
//
//        data {
//            workingDirectory project.file('runData')
//
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            property 'forge.logging.console.level', 'debug'
//
//            property 'mixin.env.remapRefMap', 'true'
//            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//
//            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'
//
//            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
//            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
//
//            ideaModule "${project.name}.datagen"
//
//            mods {
//                "${mod_id}" {
//                    source sourceSets.main
//                    source sourceSets.datagen
//                }
//            }
//        }
//    }
//}
//
//
//// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }
//
//repositories {
//    // Put repositories for dependencies here
//    // ForgeGradle automatically adds the Forge maven and Maven Central for you
//
//    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
//    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
//    // flatDir {
//    //     dir 'libs'
//    // }
//
//    maven {
//        name 'jei'
//        url 'https://dvs1.progwml6.com/files/maven'
//    }
//
//    maven {
//        name 'CurseMaven'
//        url 'https://www.cursemaven.com'
//        content {
//            includeGroup 'curse.maven'
//        }
//    }
//
//    maven {
//        name 'mekanism'
//        url 'https://modmaven.dev/'
//    }
//
//    maven {
//        name 'thermal'
//        url 'https://maven.covers1624.net/'
//        // https://nexus.covers1624.net/#browse/browse:cofh-releases
//    }
//}
//
//dependencies {
//    // Specify the version of Minecraft to use.
//    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
//    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
//    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
//    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
//    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
//    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"
//
//    // Example mod dependency with JEI
//    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
//    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
//    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
//    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"
//
//    // Example mod dependency using a mod jar from ./libs with a flat dir repository
//    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
//    // The group id is ignored when searching -- in this case, it is "blank"
//    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"
//
//    // Example mod dependency using a file as dependency
//    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")
//
//    // Example project dependency using a sister or child project:
//    // implementation project(":myproject")
//
//    // For more info:
//    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
//    // http://www.gradle.org/docs/current/userguide/dependency_management.html
//
//    antlr 'org.antlr:antlr4:4.13.1'
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
//
////    runtimeOnly "curse.maven:the-one-probe-245211:4629624" //TheOneProbe - 1.20.1-10.0.1
////
////    compileOnly 'mezz.jei:jei-1.20.1-forge:15.2.0.27'
////    runtimeOnly 'mezz.jei:jei-1.20.1-forge:15.2.0.27'
////
////    implementation "curse.maven:mekanism-268560:4807067" //Mekanism-1.20.1-10.4.2.16.jar
////    implementation "mekanism:Mekanism:1.20.1-10.4.2.16:api"
//}
//
//// This block of code expands all declared replace properties in the specified resource targets.
//// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
//// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
//// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
//tasks.withType(ProcessResources).configureEach {
//    var replaceProperties = [
//            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
//            neo_version         : neo_version, neo_version_range: neo_version_range,
//            loader_version_range: loader_version_range,
//            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
//            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
//    ]
//    inputs.properties replaceProperties
//
//    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
//        expand replaceProperties + [project: project]
//    }
//
//    // prevent duplicate resource issues from additional sourceSets
//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
//}
//
//// Example for how to get properties into the manifest for reading at runtime.
//tasks.named('jar', Jar).configure {
//    manifest {
//        attributes([
//                'Specification-Title'     : mod_id,
//                'Specification-Vendor'    : mod_authors,
//                'Specification-Version'   : '1', // We are version 1 of ourselves
//                'Implementation-Title'    : project.name,
//                'Implementation-Version'  : project.jar.archiveVersion,
//                'Implementation-Vendor'   : mod_authors,
//                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//        ])
//    }
//
//    // This is the preferred method to reobfuscate your jar file
//    finalizedBy 'reobfJar'
//}
//
//// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
//// tasks.named('publish').configure {
////     dependsOn 'reobfJar'
//// }
//
//// Example configuration to allow publishing using the maven-publish plugin
//publishing {
//    publications {
//        register('mavenJava', MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file://${project.projectDir}/mcmodsrepo"
//        }
//    }
//}
//
//tasks.withType(JavaCompile).configureEach {
//    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
//}
//
//
//
