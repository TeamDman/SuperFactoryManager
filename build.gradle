//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'antlr'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}




sourceSets {
    main {
        resources {
            srcDirs += "src/generated/resources"
            srcDirs += "src/main/resources"
            exclude ".cache"
        }
    }
    // https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests
    test {
        compileClasspath += main.output
    }
    gametest {
        java {
            srcDir "src/gametest/java"
        }
        compileClasspath += main.output
        resources {
            srcDirs += "src/gametest/resources"
        }
    }
    datagen {
        compileClasspath += main.output
    }
    generated
}

configurations {
    extendConfigurations(implementation, gametestImplementation, testImplementation, datagenImplementation)
    extendConfigurations(compileOnly, gametestCompileOnly, testCompileOnly, datagenCompileOnly)
    extendConfigurations(runtimeOnly, gametestRuntimeOnly, testRuntimeOnly, datagenRuntimeOnly)
//    testImplementation.extendsFrom(minecraft)
//    gametestImplementation.extendsFrom(minecraft)
//    datagenImplementation.extendsFrom(minecraft)
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
    for (def configuration : configurations) {
        configuration.extendsFrom(base)
    }
}


version = mod_version
group = mod_group_id

base {
    archivesName = "${mod_name}-${minecraft_version}"
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true

    // When true, this property will have all IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            // Ensure mixin dependencies play nice
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // https://github.com/ChiefArug/ThermalSysteams/blob/main/build.gradle#L27
            // https://discord.com/channels/313125603924639766/983834532904042537/1089449308048343090
            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.gametest
                }
            }
        }

        client_teamy {
            //noinspection GroovyAssignabilityCheck
            parent runs.client
            args '--username', 'TeamDman', '--uuid', '83f1df8b-0ba3-4de0-8a26-e51a1fd74318'
        }

        server {
            workingDirectory project.file('runServer')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.gametest
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('runGameTest')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.gametest
                }
            }
        }

        data {
            workingDirectory project.file('runData')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowRedefinitionToAddDeleteMethods'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            ideaModule "${project.name}.datagen"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.datagen
                }
            }
        }
    }
}



repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }

    maven {
        name 'jei'
        url 'https://dvs1.progwml6.com/files/maven'
    }

    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }

    maven {
        name 'mekanism'
        url 'https://modmaven.dev/'
    }

    maven {
        name 'thermal'
        url 'https://maven.covers1624.net/'
        // https://nexus.covers1624.net/#browse/browse:cofh-releases
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"

    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    antlr 'org.antlr:antlr4:4.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    runtimeOnly fg.deobf("curse.maven:the-one-probe-245211:4629624") //TheOneProbe - 1.20.1-10.0.1

    runtimeOnly fg.deobf("curse.maven:ftb-chunks-314906:5378090") //ftb-chunks-forge-2001.3.1.jar
    runtimeOnly fg.deobf("curse.maven:architectury-api-419699:5137938") //[Forge 1.20(.1)] v9.2.14
    runtimeOnly fg.deobf("curse.maven:ftb-library-forge-404465:5364190") //ftb-library-forge-2001.2.2.jar
    runtimeOnly fg.deobf("curse.maven:ftb-ranks-forge-314905:4596742") //ftb-ranks-forge-2001.1.3.jar
    runtimeOnly fg.deobf("curse.maven:ftb-teams-forge-404468:5267190") //ftb-teams-forge-2001.3.0.jar

    // These are for testing BiggerReactors to deduce problems with capabilities not being invalidated.
    // The power plug for the reactor was not working in programs after logging out and in on a server.
    // These are commented out because they cause problems with runData.
//    runtimeOnly fg.deobf("curse.maven:bigger-reactors-407780:4883087") //biggerreactors-1.20.1-0.6.0-beta.10.4.jar
//    runtimeOnly fg.deobf("curse.maven:phosphophyllite-412551:5122727") //phosphophyllite-1.20.1-0.7.0-alpha.0.1.jar
//    runtimeOnly fg.deobf("curse.maven:quartz-552262:5122746") //quartz-1.20.1-0.2.0-alpha.0.1.jar


    compileOnly fg.deobf('mezz.jei:jei-1.20.1-forge:15.12.3.54')
    runtimeOnly fg.deobf('mezz.jei:jei-1.20.1-forge:15.12.3.54')

    implementation fg.deobf("curse.maven:mekanism-268560:4807067") //Mekanism-1.20.1-10.4.2.16.jar
    implementation "mekanism:Mekanism:1.20.1-10.4.2.16:api"
}

// This block of code expands all declared replace properties in the specified resource tar+gets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
        neo_version         : neo_version, neo_version_range: neo_version_range,
        loader_version_range: loader_version_range,
        mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors         : mod_authors, mod_description: mod_description
]
processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

processGametestResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}


test {
    useJUnitPlatform()
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"  : mod_id,
                "Specification-Vendor" : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

generateGrammarSource {
    arguments = ["-visitor", "-package", "ca.teamdman.sfml"]
    outputDirectory = file("${project.buildDir}/generated-src/antlr/main/ca/teamdman/sfml")
}
compileJava.dependsOn generateGrammarSource

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
// However, this causes gradle to throw "Error getting artifact" so keep it commented out to retain your sanity
//idea {
//    module {
//        downloadSources = true
//        downloadJavadoc = true
//    }
//}